import{_ as n,r as t,o,c,a as e,b as i,d as a,e as s}from"./app-0418676b.js";const l={},r=e("h1",{id:"视图渲染-halsp-view",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#视图渲染-halsp-view","aria-hidden":"true"},"#"),i(" 视图渲染 "),e("code",null,"(@halsp/view)")],-1),h=e("p",null,[i("安装 "),e("code",null,"@halsp/view"),i(" 以支持视图渲染功能，用于构建一体化应用程序")],-1),u=e("code",null,"@halsp/view",-1),p={href:"https://github.com/tj/consolidate.js",target:"_blank",rel:"noopener noreferrer"},v=s(`<h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i @halsp/view
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><p>以 <code>ejs</code> 为例</p><p>添加视图模板文件夹 <code>views</code> 和文件 <code>views/index.ejs</code> 并编写 <code>ejs</code> 视图模板内容</p><p>在 <code>index.ts</code> 中添加 <code>startup.useView()</code> 如</p><div class="language-TS line-numbers-mode" data-ext="TS"><pre class="language-TS"><code>import &quot;@halsp/view&quot;;

startup
  .useView()
  .use(async (ctx) =&gt; {
    ctx.res.view(&quot;index.ejs&quot;);
  });
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="startup-useview" tabindex="-1"><a class="header-anchor" href="#startup-useview" aria-hidden="true">#</a> <code>startup.useView()</code></h2><p><code>startup.useView()</code> 接收一个可选配置参数，包括以下属性</p><ul><li>dir: 视图文件夹</li><li>options: 渲染页面用的通用参数，如网站名称和其他通用信息</li><li>engines: 视图渲染引擎</li></ul>`,10),x=e("code",null,"engines",-1),m={href:"https://github.com/tj/consolidate.js",target:"_blank",rel:"noopener noreferrer"},b=s(`<div class="language-TS line-numbers-mode" data-ext="TS"><pre class="language-TS"><code>startup.useView({
  dir: &quot;views&quot;,
  engines: [
    { ext: &quot;hbs&quot;, render: &quot;handlebars&quot; },
    { ext: &quot;custom&quot;, render: &quot;ejs&quot; },
  ],
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果扩展名与渲染引擎名称相同，可省略配置，如 xxx.ejs 文件默认使用 ejs 模板引擎</p><h3 id="视图文件夹" tabindex="-1"><a class="header-anchor" href="#视图文件夹" aria-hidden="true">#</a> 视图文件夹</h3><p>默认为 <code>views</code>, 所有视图将在视图文件夹中查找</p><h2 id="渲染函数-view" tabindex="-1"><a class="header-anchor" href="#渲染函数-view" aria-hidden="true">#</a> 渲染函数 .view()</h2><p>你可以在两个地方使用 <code>view()</code> 函数渲染视图</p><ul><li>ctx.view()</li><li>res.view()</li></ul><h3 id="ctx-view" tabindex="-1"><a class="header-anchor" href="#ctx-view" aria-hidden="true">#</a> ctx.view()</h3><p>管道 Context 类实例方法</p><p>返回值为渲染后的 html 字符串，不会修改 Response</p><h3 id="res-view" tabindex="-1"><a class="header-anchor" href="#res-view" aria-hidden="true">#</a> res.view()</h3><p>Response 类的实例方法</p><p>没有返回值，但会修改 Response</p><p>如果当前环境是微服务，则会修改 Response.body 值为渲染后的 html 字符串</p><p>如果当前环境是 http，则做如下以下操作</p><ol><li>设置返回 body 为渲染后的 html 字符串</li><li>设置状态码为 200</li><li>设置返回头 <code>content-type</code> 为 <code>text/html</code></li></ol><h3 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h3><p><code>.view()</code> 函数接收两个参数</p><ul><li>tmpPath: 模板文件夹中的相对路径</li><li>locals: 渲染参数</li></ul><p>其中 <code>tmpPath</code> 可省略模板文件扩展名，也可省略以 <code>index.xxx</code> 命名的文件</p><p>如 <code>tmpPath</code> 以下值效果相同</p><ol><li><code>user/todo/index.ejs</code></li><li><code>user/todo/index</code></li><li><code>user/todo</code></li></ol><h2 id="ctx-state" tabindex="-1"><a class="header-anchor" href="#ctx-state" aria-hidden="true">#</a> ctx.state</h2><p><code>ctx.state</code> 作为请求级别的模板参数</p><p>比如你需要在权限验证之后，每次请求都将登录信息放入 <code>ctx.state</code></p><p>在你使用 <code>view</code> 渲染模板时，<code>@halsp/view</code> 做了以下类似操作：</p><div class="language-TS line-numbers-mode" data-ext="TS"><pre class="language-TS"><code>const args = Object.assign({}, options, ctx.state, locals);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="cli" tabindex="-1"><a class="header-anchor" href="#cli" aria-hidden="true">#</a> CLI</h2><p>已内置 <code>@halsp/cli</code> 的支持</p><p>因此 <code>views</code> 文件夹不需要手动配置为资源文件</p>`,30);function w(_,g){const d=t("ExternalLinkIcon");return o(),c("div",null,[r,h,e("p",null,[u,i(" 支持多种视图模板，基于 "),e("a",p,[i("consolidate"),a(d)])]),v,e("p",null,[x,i(" 用于将文件扩展名与 "),e("a",m,[i("consolidate"),a(d)]),i(" 支持的模板对应，如")]),b])}const q=n(l,[["render",w],["__file","view.html.vue"]]);export{q as default};
